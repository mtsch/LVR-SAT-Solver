1:3 * 1
1:3 * 2
collect(1:3) * 2
ncolors = 3
collect(1:3) * 1 * ncolors

    getcolor(v, c) = v * ncolors + c
getcolor(1,1)
getcolor(1,1)
getcolor(1,2)
getcolor(1,3)
getcolor(2,1)
getcolor(2,2)
getcolor(2,3)
getcolor(4,3)
getcolor(4,4)
v = 2

        vars = [getcolor(v, c) for c in 1:ncol]
ncol = 3


        vars = [getcolor(v, c) for c in 1:ncol]
"$([1,2,3])"
map(str, [1,2,3])
map(String, [1,2,3])
map(string, [1,2,3])
reduce((x, y) -> "$x $y", map(string, [1,2,3])
reduce((x, y) -> "$x $y", map(string, [1,2,3]))
map(string, [1,2,3])
prod(map(string, [1,2,3]))
prod(map(string, [1,2,3]))
join
@doc join
join(map(string, [1,2,3]), " ")
join(map(string, [1,2,3]), ' ')

    clauses = String[]
    for v in vertices(g)
        vars = [-getcolor(v, c) for c in colors]
        for c in colors
            vars[c] *= -1
            push!(clauses, join(map(string, vars), ' ') * " 0\n")
            vars[c] *= -1
        end
    end
colors = 1:ncolors
g = Graph(3,3)
clauses
e = first(edges(g))
g
g.src
src(g)
dst(e)
src(e)

    for e in edges(g)
        v1 = src(e)
        v2 = dst(e)
        for c in colors
            push!(clauses, "$(getcolor(v1, c)) $(getcolor(v2, c)) 0\n")
        end
    end
clauses
prod(clauses)
createcnf(g)
createcnf(g, 3)
write
@doc write
write("test", "aaa")
createcnf(g, 3, "testgraph.cnf")
createcnf(g, 3, "testgraph.cnf")
createcnf(dolphins, 3, "dolphins.cnf")
@doc loadgraph
NETFormat
Pkg.add("GraphIO")
fromfile(3, "dolphins.net", "dolphins.cnf")
@doc loadgraph
fromfile(3, "dolphins.net", "dolphins.cnf")
fromfile(3, "dolphins.net", "dolphins.cnf")
loadgraph
@doc loadgraph
methods( loadgraph)
NETFormat
NETFormat()
fromfile(3, "dolphins.net", "dolphins.cnf")
infile = "dolphins.net"
fmt = NETFormat()
formula
infile = "dolphins.net"
formula = createcnf(g, ncolors)
formula = createcnf(g, ncolors)
formula = createcnf(g, ncolors)
